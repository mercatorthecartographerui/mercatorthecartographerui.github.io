---
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  # testing-pipeline
  name: <CODE_TESTING_SOURCE_TEMPLATE_NAME>
spec:
  healthRule:
    singleConditionType: Ready
  params:
    - default:
        apps.tanzu.vmware.com/pipeline: test
      name: testing_pipeline_matching_labels
  revisionPath: .status.outputs.revision
  urlPath: .status.outputs.url
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def merged_tekton_params():
    #@   params = []
    #@   if hasattr(data.values, "params") and hasattr(data.values.params, "testing_pipeline_params"):
    #@     for param in data.values.params["testing_pipeline_params"]:
    #@       params.append({"name": param, "value": data.values.params["testing_pipeline_params"][param]})
    #@     end
    #@   end
    #@   params.append({ "name": "source-url", "value": data.values.source.url })
    #@   params.append({ "name": "source-revision", "value": data.values.source.revision })
    #@   return params
    #@ end
    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "test" })
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName
      runTemplateRef:
        name: <CODE_TESTING_RUN_TEMPLATE_NAME>
        kind: ClusterRunTemplate
      selector:
        resource:
          apiVersion: tekton.dev/v1beta1
          kind: Pipeline
          #@ not hasattr(data.values,"testing_pipeline_matching_labels") or fail("testing_pipeline_matching_labels param is required")
          matchingLabels: #@ data.values.params["testing_pipeline_matching_labels"] or fail("testing_pipeline_matching_labels param cannot be empty")
      inputs:
        tekton-params: #@ merged_tekton_params()

---
apiVersion: carto.run/v1alpha1
kind: ClusterRunTemplate
metadata:
  # tekton-source-pipelinerun
  name: <CODE_TESTING_RUN_TEMPLATE_NAME>
spec:
  outputs:
    revision: spec.params[?(@.name=="source-revision")].value
    url: spec.params[?(@.name=="source-url")].value
  template:
    apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: $(runnable.metadata.name)$-
      labels: $(runnable.metadata.labels)$
    spec:
      params: $(runnable.spec.inputs.tekton-params)$
      pipelineRef:
        name: $(selected.metadata.name)$ # Does not hardcode tekton pipeline name. Rather works based on selection of tags created in the pipeline itself. check testing-pipeline-template.yaml-->Runnable.spec.selector.resource section.

