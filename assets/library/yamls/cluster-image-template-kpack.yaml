apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: <NAME>
spec:
  healthRule:
    multiMatch:
      healthy:
        matchConditions:
          - status: "True"
            type: BuilderReady
          - status: "True"
            type: Ready
      unhealthy:
        matchConditions:
          - status: "False"
            type: BuilderReady
          - status: "False"
            type: Ready
  imagePath: .status.latestImage
  params:
    - name: serviceAccount
      default: <DEFAULT_SERVICE_ACCOUNT>
    - name: clusterBuilder
      default: <DEFAULT_KPACK_CLUSTER_BUILDER>
  ytt: |
    #@ load("@ytt:data", "data")

    #@ def addLabels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def makeTag():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace
    #@    ])
    #@   ])
    #@ end

    apiVersion: kpack.io/v1alpha2
    kind: Image
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ addLabels({ "app.kubernetes.io/component": "build" })
    spec:
      tag: #@ makeTag()
      serviceAccountName: #@ data.values.params.serviceAccount
      builder:
        kind: ClusterBuilder
        name: #@ data.values.params.clusterBuilder
      source:
        blob:
          url: #@ data.values.source.url
        #@ if hasattr(data.values.workload.spec, "source"):
        #@ if/end hasattr(data.values.workload.spec.source, "subPath"):
        subPath: #@ data.values.workload.spec.source.subPath
        #@ end
      build:
        env:
        - name: BP_OCI_SOURCE
          value: #@ data.values.source.revision
        #@ if hasattr(data.values.workload.spec.build, "env"):
        #@ for var in data.values.workload.spec.build.env:
        - name: #@ var.name
          #@ if/end hasattr(var, "value"):
          value: #@ var.value
          #@ if/end hasattr(var, "valueFrom"):
          valueFrom: #@ var.valueFrom
        #@ end
        #@ end
