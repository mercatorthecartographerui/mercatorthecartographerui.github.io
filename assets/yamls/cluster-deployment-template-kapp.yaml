apiVersion: carto.run/v1alpha1
kind: ClusterDeploymentTemplate
metadata:
  name: <NAME>
spec:
  observedCompletion:
    succeeded:
      key: .status.conditions[?(@.type=="ReconcileSucceeded")].status
      value: "True"
    failed:
      key: .status.conditions[?(@.type=="ReconcileSucceeded")].status
      value: "False"
  params:
    - name: serviceAccount
      default: <DEFAULT_SERVICE_ACCOUNT_NAME>
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:assert", "assert")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.deliverable.metadata, "labels"):
    #@     labels.update(data.values.deliverable.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    ---
    apiVersion: kappctrl.k14s.io/v1alpha1
    kind: App
    metadata:
      name: #@ data.values.deliverable.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "deploy" })
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      fetch:
        - http:
            url: #@ data.values.deployment.url or assert.fail("missing required deployment config url")
            #@ if hasattr(data.values.deliverable.spec.source, "subPath"):
            subPath: #@ data.values.deliverable.spec.source.subPath
            #@ elif hasattr(data.values.params, "gitops_sub_path"):
            subPath: #@ data.values.params.gitops_sub_path
            #@ end

        - inline:
            paths:
              config.yml: |
                ---
                apiVersion: kapp.k14s.io/v1alpha1
                kind: Config
                rebaseRules:
                  - path: 
                      - metadata
                      - annotations
                      - serving.knative.dev/creator
                    type: copy
                    sources: [new, existing]
                    resourceMatchers: &matchers
                      - apiVersionKindMatcher: 
                          apiVersion: serving.knative.dev/v1
                          kind: Service
                  - path: 
                      - metadata, 
                      - annotations, 
                      - serving.knative.dev/lastModifier
                    type: copy
                    sources: [new, existing]
                    resourceMatchers: *matchers
      template:
        - ytt: {}
        - kbld: {}
      deploy:
        - kapp: {}
